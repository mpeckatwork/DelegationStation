@namespace DelegationStation.Shared

<div class="modal fade @backDrop " aria-modal="true" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered" >
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@MessageTitle</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="(() => Close())"></button>
            </div>
            <div class="modal-body">
                @MessageBody
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="(() => Close())">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="(() => Confirm())">Confirm</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string MessageTitle { get; set; } = "Are you sure?";
    [Parameter]
    public string MessageBody { get; set; } = "This action is permanent";
    [Parameter]
    public Action? ConfirmAction { get; set; }
    [Parameter]
    public Action? CancelAction { get; set; }

    private bool popupIsVisible = false;
    private string showClass = "";
    private string backDrop = "hideModal";

    private void Close()
    {
        popupIsVisible = false;
        showClass = "";
        backDrop = "hideModal";
        CancelAction?.Invoke();    
    }

    private void Confirm()
    {
        popupIsVisible = false;
        showClass = "";
        backDrop = "hideModal";
        ConfirmAction?.Invoke();
    }

    public void Show()
    {
        showClass = "showModal";
        backDrop = "show showModal modalBackdrop";
    }
}
